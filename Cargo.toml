[package]
name = "sort_comp"
version = "0.1.0"
edition = "2021"

[lib]
# They are just noisy and this is not meant as a documented library, but as a testbed.
doctest = false
# Arguably everything you want to test should be your oberservable interface.
# Plus it's faster to run everything as integration test.
# See https://matklad.github.io/2021/02/27/delete-cargo-integration-tests.html
test = false


# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
once_cell = "1.15"
paste = "1.0"
zipf = "7.0.0"
radsort = { version = "0.1", optional = true }
dmsort = { version = "1.0", optional = true }
glidesort = { version = "0.1.2", features = ["unstable"], optional = true }
crumsort = { version = "0.1", optional = true }
tiny_sort = { version = "1.0", optional = true }
sort_test_tools = { path = "sort_test_tools", default-features = false }
ipnsort = { path = "ipnsort", default-features = false }
rayon = { version = "1.8.0", optional = true }

[dev-dependencies]
rand = "0.8"
criterion = { version = "0.3", features = ["html_reports"] }
core_affinity = { version = "0.7" }
regex = { version = "^1" }

# Needed because of buffy dependencies.
proc-macro2 = { version = "^1.0.64" }

[build-dependencies]
cc = { version = "1.0", features = ["parallel"] }

# Thin LTO because the bench harness and the library are by default separate "crates" and will not
# benefit from LTO. This is problematic for non-trivial FFI types where the comparison function is
# defined in a separate crate and not visible to the optimizer. C++ in contrast pulls in all this
# information via the headers and doesn't need this.
[profile.release]
lto = "thin"
# opt-level = 0
# debug = true

[profile.bench]
lto = "thin"

[[bench]]
name = "bench"
harness = false

[features]
default = [
    "large_test_sizes",
    # "cold_benchmarks",
    # "evolution",
    # "small_sort",
    # "partition",
    # "partition_point",
    # "bench_type_rust_string",
    # "bench_type_val_with_mutex",
    # "bench_type_u8",
    # "bench_type_u16",
    # "bench_type_u32",
    # "bench_type_u128",

    # "cpp_std_sys",
    # "cpp_std_libcxx",
    # "cpp_std_gcc4_3",
    # "cpp_pdqsort",
    # "cpp_powersort",
    # "cpp_simdsort",
    # "cpp_vqsort",
    # "cpp_intel_avx512",
    # "cpp_ips4o",
    # "cpp_blockquicksort",
    # "cpp_gerbens_qsort",
    # "c_std_sys",
    # "c_crumsort",
    # "c_fluxsort",
    # "singeli_singelisort",
    # "rust_wpwoodjr",
    # "rust_radsort",
    # "rust_dmsort",
    # "rust_glidesort",
    # "rust_crumsort_rs",
    # "rust_tinysort",
    # "rust_rayon_parallel",
]

# Enable support for C++ std::sort and std::sort_stable.
cpp_std_sys = []

# Enable support for libcxx.
# You must provide a prebuild static libcxx see: https://libcxx.llvm.org/BuildingLibcxx.html
# Set the enviroment variable LIBCXX_CUSTOM_BUILD_DIR=<...>
# This creates a new cpp_std_libcxx.
cpp_std_libcxx = []

# Enable support for C++ std::sort and std::sort_stable, using gcc 4.3 (2008).
cpp_std_gcc4_3 = []

# Enable support for cpp_pdqsort.
# Uses system C++ standard lib.
cpp_pdqsort = []

# Enable powersort from the Multiway Powersort (2022) paper.
# Uses system C++ standard lib.
cpp_powersort = []

# Enable avx2 sort from simd-sort https://github.com/WojciechMula/simd-sort.
# Uses system C++ standard lib.
cpp_simdsort = []

# Enable highway sort from https://github.com/google/highway/tree/master/.
# Uses clang and libcxx.
cpp_vqsort = []

# Enable avx512 sort from https://github.com/intel/x86-simd-sort.
# Uses clang and libcxx.
cpp_intel_avx512 = []

# Enable ips4o from Engineering In-place (Shared-memory) Sorting Algorithms (2020) paper.
# Uses system C++ standard lib.
cpp_ips4o = []

# Enable BlockQuicksort blocked_double_pivot_check_mosqrt.h from the "BlockQuicksort: Avoiding
# Branch Mispredictions in Quicksort" (2016) paper.
# Uses system C++ standard lib.
cpp_blockquicksort = []

# Enable Gerben Stavenga's QuickSort https://github.com/gerben-s/quicksort-blog-post
# Uses system C++ standard lib.
cpp_gerbens_qsort = []

# Enable support for C qsort.
# Uses system C standard lib.
c_std_sys = []

# Enable crumsort by Igor van den Hoven.
# Uses system C++ standard lib.
c_crumsort = []

# Enable fluxsort by Igor van den Hoven.
# Uses system C++ standard lib.
c_fluxsort = []

# Enable SingeliSort by Marshall Lochbaum.
# Uses system C++ standard lib.
singeli_singelisort = []

# Enable rust_wpwoodjr sort.
# No additional requirements, but disabled by default to keep things lean.
rust_wpwoodjr = []

# Enable radsort. Radix sort used by bevy.
# No additional requirements, but disabled by default to keep things lean.
rust_radsort = ["radsort"]

# Enable drop-merge sort developed by Emil Ernerfeldt (emilk)
# No additional requirements, but disabled by default to keep things lean.
rust_dmsort = ["dmsort"]

# Enable glidesort by Orson Peters.
rust_glidesort = ["glidesort"]

# Enable Rust port of crumsort. Parallelized by default and not a carbon copy port. There are
# substantial differences to the original crumsort.
rust_crumsort_rs = ["crumsort"]

# Enable binary-size optimized stable and unstable tiny-sort by Lukas Bergdoll.
rust_tinysort = ["tiny_sort"]

# Enable rayon paralell sorts
rust_rayon_parallel = ["rayon"]

# Enable the sort evolution code.
# Demonstrates various stages and optimizations of stable and unstable sorts.
evolution = []

# Enable explicit small-sort benchmarks.
small_sort = []

# Enable partition benchmarks.
partition = []

# Enable partition_point benchmarks.
partition_point = []

# --- Other ---

# Add the inline(never) attribute to implementation functions of (un)stable::rust_ipn.
# This allows better tracing with tools like uftrace.
# However this skews the results, the measured effect will vary.
no_inline_sub_functions = []

# Cold benchmarks, enable cold benchmarks that clobber the btb and other CPU caches.
cold_benchmarks = []

# Enable the Rust String "rust_string" type for benchmarks.
# The string benchmarks are performed with FFIString, which should be very close to rust_string.
bench_type_rust_string = []

# Enable the "val_with_mutex" type for benchmarks
bench_type_val_with_mutex = []

# Enable the "u8" type for benchmarks
bench_type_u8 = []

# Enable the "u16" type for benchmarks
bench_type_u16 = []

# Enable the "u32" type for benchmarks
bench_type_u32 = []

# Enable the "u128" type for benchmarks
bench_type_u128 = []

large_test_sizes = ["sort_test_tools/large_test_sizes"]
